/**
  * @file ATIForceTorqueSensorWidget.h
  * @brief Declaration of the ATIForceTorqueSensorWidget class
  * @author Lisandro Leon
  */

#ifndef _ATI_FORCE_TORQUE_SENSOR_WIDGET_H_
#define _ATI_FORCE_TORQUE_SENSOR_WIDGET_H_

#include <QAction>
#include <QCheckBox>
#include <QDebug>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QLabel>
#include <QLCDNumber>
#include <QLineEdit>
#include <QMenu>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>
#include <QWidget>

/**
  * This class is the Qt widget designed to interface with the Nano17.
  * It was developed as a standalone widget (i.e., independent of the hardware).
  * Signals generated by this widget connects to hardware through ATIForceTorqueSensorWindow class.
  * ATIForceTorqueSensor class provides direct control of Nano17
  */
class ATIForceTorqueSensorWidget : public QWidget
{
    Q_OBJECT

private:
    /// boolean flag to determine how much to output to terminal console
    bool verbose;
    /// connects the signals generated by the widget to slots that emit external signals for connection
    void connect_slots();
    /// creates the buttons on this widget
    void create_buttons();
    /// creates the checkboxes on this widget
    void create_checkboxes();
    /// creates miscelleneous display on this widget (e.g., spinboxes, lcd)
    void create_displays();
    /// creates the layout of the components automatically
    void create_layouts();

protected:
    /// Pointer to checkbox that toggles buffer updates to the widget
    QCheckBox * autoUpdateCheckBox;
    /// Pointer to checkbox that toggles buffer output to a file
    QCheckBox * writeOutputCheckBox;
    /// Pointer to grouping of actions for measuring the sensor bias
    QGroupBox * biasGroupBox;
    /// Pointer to grouping of buffer related actions
    QGroupBox * bufferGroupBox;
    /// Pointer to grouping of labels to identify the sensor channel
    QGroupBox * axisGroupBox;
    /// Pointer to grouping of measurement control actions
    QGroupBox * measurementGroupBox;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout1;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout2;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout3;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout4;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout5;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout6;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout7;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout8;
    /// Pointer to sensor channel label
    QLabel * fxLabel;
    /// Pointer to sensor channel label
    QLabel * fyLabel;
    /// Pointer to sensor channel label
    QLabel * fzLabel;
    /// Pointer to sensor channel label
    QLabel * txLabel;
    /// Pointer to sensor channel label
    QLabel * tyLabel;
    /// Pointer to sensor channel label
    QLabel * tzLabel;
    /// Pointer to label designating the buffers
    QLabel * bufferLabel;
    /// Pointer to label designating the running average of the buffers
    QLabel * runningAverageLabel;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayFx;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayFy;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayFz;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayTx;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayTy;
    /// Pointer to display of sensor channel buffer value
    QLCDNumber * displayTz;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayFxAvg;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayFyAvg;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayFzAvg;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayTxAvg;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayTyAvg;
    /// Pointer to display of sensor channel buffer value (using running average)
    QLCDNumber * displayTzAvg;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayFxBias;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayFyBias;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayFzBias;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayTxBias;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayTyBias;
    /// Pointer to display of sensor channel bias value
    QLCDNumber * displayTzBias;
    /// Pointer to user-determined sample-time for reading sensor and storing in buffer
    QLineEdit * measurementTime;

    /// Pointer to pull-down menu
    QMenu * infoMenu;
    /// Pointer to pull-down menu
    QMenu * controlMenu;
    /// Pointer to pull-down menu
    QMenu * helpMenu;
    /// Pointer to main menu bar
    QMenuBar * menuBar;
    /// Pointer to button to measure and store the sensor bias
    QPushButton * biasButton;
    /// Pointer to button to measure sensor using running average
    QPushButton * measureButton;
    /// Pointer to button to measure sensor one time
    QPushButton * updateButton;
    /// Pointer to main layout
    QVBoxLayout * layout;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout1;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout2;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout3;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout4;

public:
    /// Default contructor for ATIForceTorqueSensorWidget class
    explicit ATIForceTorqueSensorWidget(QWidget *parent = 0);
    /// Default destructor for ATIForceTorqueSensorWidget class
    ~ATIForceTorqueSensorWidget();
    /// returns this->verbose, which is a private member of this class
    bool is_verbose();
    /// sets this->verbose to the input parameter "flg"
    void set_verbose(bool flg);

public slots:
    /// connect the signal from "biasButton" widget to emitted "signal_bias"
    void emit_bias();
    /// connect the signal from "measureButton" widget to emitted "signal_measure"
    void emit_measure();
    /// connect the signal from "updateButton" widget to emitted "signal_update"
    void emit_update();

signals:
    /// emit signal based on "biasButton" click
    void signal_bias();
    /// emit signal based on "measureButton" click
    void signal_measure();
    /// emit signal based on "updateButton" click
    void signal_update();
};

#endif // _ATI_FORCE_TORQUE_SENSOR_WIDGET_H_
