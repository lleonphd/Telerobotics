/**
  * @file SensorayWidget.h
  * @brief Declaration of the SensorayWidget class
  * @author Lisandro Leon
  */

#ifndef _SENSORAY_WIDGET_H_
#define _SENSORAY_WIDGET_H_

#include <QAction>
#include <QCheckBox>
#include <QCloseEvent>
#include <QDebug>
#include <QDoubleValidator>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QInputDialog>
#include <QLabel>
#include <QLCDNumber>
#include <QLineEdit>
#include <QMenu>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>
#include <QWidget>

/**
  * This class is the Qt widget designed to interface with the Sensoray S626 card.
  * It was developed as a standalone widget (i.e., independent of the hardware).
  * Signals generated by this widget connects to hardware through SensorayWindow class.
  * Sensoray class provides direct control of Sensoray S626 card.
  */
class SensorayWidget : public QWidget
{
    Q_OBJECT

private:
    /// boolean flag to determine how much to output to terminal console
    bool verbose;
    /// connects the signals generated by the widget to slots that emit external signals for connection
    void connect_slots();
    /// create QActions for this widget
    void create_actions();
    /// creates the buttons on this widget
    void create_buttons();
    /// creates the checkboxes on this widget
    void create_checkboxes();
    /// creates miscelleneous display on this widget (e.g., spinboxes, lcd)
    void create_displays();
    /// creates various groupings of related actions, controls, functions
    void create_groupbox();
    /// create various labels on the widget
    void create_labels();
    /// create the main layout for the widget
    void create_layout();
    /// create the layout for the control actions
    void create_layout_control();
    /// create the layout for the analog inputs
    void create_layout_inputs();
    /// create the layout for the digital outputs
    void create_layout_outputs();
    /// create the layout for the user-defined entries for the digital outputs
    void create_line_inputs();

protected:
    /// Pointer to checkbox that toggles buffer updates to the widget
    QCheckBox * autoUpdateCheckBox;
    /// Pointer to checkbox that toggles buffer output to a file
    QCheckBox * writeOutputCheckBox;
    /// Pointer to grouping of digital output widgets
    QGroupBox * outGroupBox;
    /// Pointer to grouping of labels identifying the channels for digital outputs
    QGroupBox * outLabelGroupBox;
    /// Pointer to grouping of analog input widgets
    QGroupBox * inGroupBox1;
    /// Pointer to grouping of labels identifying the channels for analog inputs
    QGroupBox * inLabelGroupBox1;
    /// Pointer to grouping of analog input widgets
    QGroupBox * inGroupBox2;
    /// Pointer to grouping of labels identifying the channels for analog inputs
    QGroupBox * inLabelGroupBox2;
    /// Pointer to grouping of action buttons
    QGroupBox * buttonGroupBox;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout1;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout2;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout3;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn1;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn2;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn3;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn4;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn5;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn6;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn7;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn8;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn9;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn10;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn11;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn12;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn13;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn14;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn15;
    /// Pointer to label identifying analog input channel
    QLabel * labelIn16;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn1;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn2;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn3;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn4;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn5;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn6;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn7;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn8;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn9;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn10;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn11;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn12;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn13;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn14;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn15;
    /// Pointer to display the value of the analog input channel buffer
    QLCDNumber * displayIn16;
    /// Pointer to user-defined value of the digital output channel
    QLineEdit * lineOut1;
    /// Pointer to user-defined value of the digital output channel
    QLineEdit * lineOut2;
    /// Pointer to user-defined value of the digital output channel
    QLineEdit * lineOut3;
    /// Pointer to user-defined value of the digital output channel
    QLineEdit * lineOut4;
    /// Pointer to label identifying digital output channel
    QLabel * labelOut1;
    /// Pointer to label identifying digital output channel
    QLabel * labelOut2;
    /// Pointer to label identifying digital output channel
    QLabel * labelOut3;
    /// Pointer to label identifying digital output channel
    QLabel * labelOut4;
    /// Pointer to pull-down menu
    QMenu * infoMenu;
    /// Pointer to pull-down menu
    QMenu * controlMenu;
    /// Pointer to pull-down menu
    QMenu * helpMenu;
    /// Pointer to main menu bar
    QMenuBar * menuBar;
    /// Pointer to button to output values through digital outputs
    QPushButton * sendButton; // send voltage outputs through DAC
    /// Pointer to button to measure digital inputs one time
    QPushButton * updateButton; // update input voltages being displayed
    /// Pointer to button to set conversions
    QPushButton * conversionButton;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout1;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout2;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout3;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout4;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout5;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout6;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout7;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout0;
    /// Pointer to horizontal layout
    QHBoxLayout * layout0;
    /// Pointer to horizontal layout
    QVBoxLayout * layout1;
    /// Pointer to main layout
    QHBoxLayout * mainLayout;

public:
    /// Default contructor for SensorayWidget class
    explicit SensorayWidget(QWidget *parent = 0);
    /// Default destructor for SensorayWidget class
    ~SensorayWidget();
    /// returns this->verbose, which is a private member of this class
    bool is_verbose();
    /// sets this->verbose to the input parameter "flg"
    void set_verbose(bool flg);

public slots:
    /// connect the signal from "sendButton" widget to emitted "signal_send"
    void emit_send();
    /// connect the signal from "updateButton" widget to emitted "signal_update"
    void emit_update();
    /// connect the signal from "conversionButton" widget to emitted "signal_update"
    void emit_conversions();

signals:
    /// emit signal based on "sendButton" click
    void signal_send(); // send to output channels3
    /// emit signal based on "updateButton" click
    void signal_update(); // update input channel display
    /// emit signal based on "conversionButton" click
    void signal_conversions(); // conversions applied to voltage signals
};

#endif // _SENSORAY_WIDGET_H_
