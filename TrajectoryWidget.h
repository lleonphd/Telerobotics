/**
  * @file TrajectoryWidget.h
  * @brief Declaration of the TrajectoryWidget class
  * @author Lisandro Leon
  */

#ifndef _TRAJECTORY_WIDGET_H_
#define _TRAJECTORY_WIDGET_H_

#include <QCheckBox>
#include <QCloseEvent>
#include <QDebug>
#include <QGroupBox>
#include <QHBoxLayout>
#include <QPushButton>
#include <QString>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QVBoxLayout>
#include <QWidget>

/**
  * This class is the Qt widget designed to edit and run the trajectories for insertion experiments.
  * It was developed as a standalone widget (i.e., independent of the hardware).
  * Signals generated by this widget executes specific commands using TrajectoryWindow class.
  */
class TrajectoryWidget : public QWidget
{
    Q_OBJECT

private:
    /// pointer to checkbox for advancing to the next trajectory list manually
    QCheckBox * manualAdvanceCheckBox;
    /// pointer to group the buttons for editing the trajectories
    QGroupBox * editGroupBox;
    /// pointer to group the options for running experiments
    QGroupBox * executeGroupBox;

    /// Pointer to horizontal layout
    QHBoxLayout * hlayout1;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout2;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout3;
    /// Pointer to horizontal layout
    QHBoxLayout * hlayout4;
    /// Pointer to button that aborts the insertion experiment
    QPushButton * abortButton;
    /// Pointer to button that appends to the trajectory list
    QPushButton * appendButton;
    /// Pointer to button that deletes the current row of the trajectory list
    QPushButton * deleteButton;
    /// Pointer to button that runs the trajectories in incremented insertions
    QPushButton * discreteButton;
    /// Pointer to button that runs the trajectories as a continuous insertion
    QPushButton * goButton;
    /// Pointer to button that moves the actuators to the current row in the trajectory list
    QPushButton * insertButton;
    /// Pointer to button that loads a trajectory *.csv file
    QPushButton * loadButton;
    /// Pointer to button that replaces the current row of the trajectory list
    QPushButton * replaceButton;
    /// Pointer to button that runs the trajectories as a continuous insertion
    QPushButton * runButton;
    /// Pointer to button that saves the current trajectory list to a *.csv file
    QPushButton * saveButton;
    /// column headers for trajectory table
    QStringList headerStringList;
    /// Pointer to main layout
    QVBoxLayout * layout;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout1;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout2;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout3;
    /// Pointer to vertical layout
    QVBoxLayout * vlayout4;

    /// boolean flag used to enable verbose output on the terminal window
    bool verbose;

    /// create buttons used by this widget
    void create_buttons();
    /// create checkboxes used by this widget
    void create_checkboxes();
    /// create the layout for this widget
    void create_layouts();

    /// connects the signals generated by the widget to slots that emit external signals for connection
    void connect_slots();

    /// initialize all the members of this class
    void initialize_members();

    /// initializes the trajectory table containing the actuator reference positions
    void initialize_table();

protected:
    /// Pointer to table
    QTableWidget * tableWidget;

public:
    /// Default contructor for TrajectoryWidget class
    explicit TrajectoryWidget(QWidget *parent = 0);
    /// Default destructor for TrajectoryWidget class
    ~TrajectoryWidget();
    /// Instructions if any event closes this instance of TrajectoryWidget
    void closeEvent(QCloseEvent *event);
    /// disables all the actuators ... essentially a software kills switch
    void disable_action();
    /// enables all the actuators
    void enable_action();

    /// returns the value found in the table
    /**
      returns the contents in the table
      @return a float containing the contents of the table
      @param row queries the row of the table
      @param col queries the column of the table
      */
    float get_contents(int row, int col);

    /// returns the current row selected
    /**
      returns the current row selected
      @return an integer that identifies the currently selected row
      */
    int get_current_row();

    /// returns the total numbers of rows in the table list
    /**
      gets the number of rows from the trajectory table
      @return int as the number of table rows
      */
    int get_row_count();

    /// returns the boolean verbose
    /**
      returns the boolean verbose
      @return bool
      */
    bool is_verbose();

    /// resets all the table entries
    void reset_table();

    /// creates or replaces an entry in the trajectory table
    /**
      creates or replaces an entry in the trajectory table
      \param row is the table row
      \param col is the table column
      \param val is the value corresponding to the row and column
      \return void
      */
    void set_contents(int row, int col, float val);

    /// enables and disables GUI buttons
    void set_controls();

    void set_focus();

    /// sets the boolean verbose flag
    /**
      \param flg is used to set the boolean verbose
      */
    void set_verbose(bool flg);

public slots:
    /**
      \fn void emit_abort()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_abort()
      \return void
      */
    void emit_abort();

    /**
      \fn void emit_append()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_append()
      \return void
      */
    void emit_append();

    /**
      \fn void emit_delete()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_delete()
      \return void
      */
    void emit_delete();

    /**
      \fn void emit_discrete()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_discrete()
      \return void
      */
    void emit_discrete();

    /**
      \fn void emit_go()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_go()
      \return void
      */
    void emit_go();

    /**
      \fn void emit_insert()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_insert()
      \return void
      */
    void emit_insert();

    /**
      \fn void emit_load()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_load()
      \return void
      */
    void emit_load();

    /**
      \fn void emit_manual()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_manual(bool flg)
      \return void
      \param flg is the boolean from the the QCheckBox * manualAdvanceCheckBox clicked(bool) signal;
      */
    void emit_manual(bool flg);

    /**
      \fn void emit_replace()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_replace()
      \return void
      */
    void emit_replace();

    /**
      \fn void emit_run()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_run()
      \return void
      */
    void emit_run();

    /**
      \fn void emit_emit()
      \brief Qt slot to emit Qt signal TrajectoryWidget::signal_emit()
      \return void
      */
    void emit_save();

signals:
    /// Qt signal: signal_abort
    void signal_abort();
    /// Qt signal: signal_append
    void signal_append();
    /// Qt signal: signal_delete
    void signal_delete();
    /// Qt signal: signal_discrete
    void signal_discrete();
    /// Qt signal: signal_go
    void signal_go();
    /// Qt signal: signal_insert
    void signal_insert();
    /// Qt signal: signal_load
    void signal_load();
    /// Qt signal: signal_manual
    /**
      * @param flg gives the signal a boolean member
      */
    void signal_manual(bool flg);
    /// Qt signal: signal_replace
    void signal_replace();
    /// Qt signal: signal_run
    void signal_run();
    /// Qt signal: signal_save
    void signal_save();
};

#endif // _TRAJECTORY_WIDGET_H_
